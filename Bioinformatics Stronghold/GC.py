data = """>Rosalind_4422
TAGGTATCGATCGATCCGAGGGTTACAGGTGAAATTGCGTTAGGCGCGCTCGGCCGGGAG
TTCACCCTACAATCAGACTGATCTAGATTCCCTACATCCGTTACATCGACGCCAACATCA
ATGAGACTCTCTAGAGGCATAGAAAATACCGCGAGAAGCCCACTTTTTTACACAGCTGAT
GATCTTAACCAGGTTCGTACGGTGTGGGGCACCTTAACTCGCGAGAAGTATATTGCAGGC
AGGGCCTAGAGCGATGGCGCCGTAACATCCTTCAAGTATCAACCCTCGCTCAAATGGTAA
GTCCGCGTCTATGCACGCACAAGATTGGCACCCGTGGTCCCGCTACTGCATGTCGTCTTA
CCCCAATGTATCTTATGCGATTTGTGAATCTTAGTTCATCTCAAAGCCGCAATGTCCCAC
CCCTATTCTCAACTTAAGCCGATAAGCCAGAAGTCGATCCCGCGCCCCCAAACTACCCCC
TTAGAGGCGCGGCACTAGGCAAGTAGGTCGCAAGCCTGGTGGTCTGGATCTTGGAGTAAT
TGAATACCAGATCTGGCTCACTGGGATGTCTTGCCAGCCTCTCACTTGATGACTTCCCTC
CCCAGATCAAGGCCCTTCCAAAGACCAGCCAAAAGGAAGGCTGGAATCAAGAGTCAACTG
TGTGCCCATATCACCGGCGAAATGCCGACCAGAGCGGGTTGCACTTGTCGGCGCTCCATA
CGTAATTGCCATCTTATGAACTCAAGCGCGGCAACTTTCCTAATCCACCTACTTACACCT
ATAAACGATCCTCGTTGGCGGTCTTCCCAAATATTCTAAACGTCAAGGGTTGCAGTACAA
GTAGACGAATCCCCCCG
>Rosalind_6523
CAACTAAGACTTGGTGGGAGTAAATACCCTGTGCAGGTACCAGACCAGGCCAGGTGGAAC
TCACTAGACGTGACCGTTGCTGCCTTGCGGGCAAGCGGTAGGCAGATCGAATTCACCACA
CAGAAAATCCGCGCTGCTCGCGTTTTAGGCTGGCCAAGTTCGCGGAAGTCTTAATCTAAT
GAGAACCATGAGGACCGCCATTCGATAGTAGTCCCAGTCTTGGGCCAAGTGACTGATAGT
TCCATCGTGTGCGGGTGGACCACGGGTACGGGTCTTGGCCGGGAGGTACTAACACCAAGG
CCTTGGTGAATGATCAGCGCCAAGATAATGCCATTTACCGTTTCCACTGCCCCTCTTTCC
AAGTTATCAACTGTCTGTTATATATCAAACGTAAACTGTGAGAGAGGACCACCTTGAAAT
CCCACAGGGTAATAATATCGAGATGAAGTCATACTTCGGGTCCTGGTTACCCCATCACGG
GAGTTGTTTGTCTCGCGTGTATTCTTCGCTACTTTGGAACCACCTCCGAATATGGGTGGC
GTGATGGTAAAGCGCGCCTGGAGCGCTGCGGGGGCGTATGTAAACATCCAGTCTTAGACC
ATCGGAGGGTGCCATAGGTGGCTTAGCGCCCCCTCTGAGAAGTGGGGGTCCGGGTCAAGG
ACTCCCAAATCAGGAAAAGTCCACATGACATGTCACAAGCTATACACTCGAACTCTAGAT
AAGTTTCAACGCGATTAAAACAATCGTATAGCACGAGCCTGTAACAAGACTATTTGAGAG
CTGCAGGGACACGGTGGACCGCAATAACAACCACATTCACAGGTACTATATCAATTCACA
TACGGGGCTCGAAGGTTAAAACTGTTTTTCTTAGCATTGGTTCGGAGATTAAGATGTTGA
ATTCCTACGCTCTGCCCATTAACACAGCCGGCTTGGTTTTTGAATGGCCAGGCCAGATCT
AATGGCCTA
>Rosalind_8491
CTCTCGTGGGCGAATCATAACTGATGTAAACGTCCGGAGATAGATTTGTTGGCGTTACTA
TAAGGTCACCAAAATTTTAATATCTAGGCTGTAGTAAGTGTCACTCAAGACCCAACCGAA
AACCTCTAGGGTGAATCACCTGTTCTGTTAGTAATGACCGGTACGGATTGGGGCTTAGTG
GATCGAGCACAATGCGCGGTCTCTTAACCGGTCTAATAGCGGTATCCTGCAAGGAATCGA
TCTGGTAGGAACCACCGTAGGAGACTGAGGTTAATGTTATTGAGTGCTTCTGGCCTCCCA
AGCGTGTCTGACCTTGTGGCGTTGGTTTCTGCGTTTACCACTGAGCGAAGGTCAGCCTGA
CTTACAGTGGACCCTCGAAGAGCATCTCGGACATTCACTTAACTGTACCCCGGATATAGC
ACCGGGCCCATTCTTTCGCTCGCGTCGAAGTCACCGTATGGATAATTACTTCTGAAGGAT
TTCCGGCCGCCCATTCTTTACACGGGTCCTTCTCCCAACCCACTCTCCCGGCAATACACC
ACTTAAAGTAGATCGAGGACTTAGCCACTGTAAATATGGAAGGGAACCTAGCAGGCCGGC
ATAGAGTGTTTGCGGCCCGACTTTTGGTTACAGGCTAACCTTATAATCCAACCTTACTTA
TGGGATAGATGTGCCAATCAAGACGGCGATACGTAACAATCTAGTCCAGTTGAACAGGAG
GTTTGCCAGAGCTTAACTAAAGTTTAGGAACGATCCGTCAGTAACGCCTTATCTGTGGAA
TTCTGCAGAACTGTAATGATGTAGCTTTAAGTGTTTGTAACGTTTGTGAATGGGGGAATT
CTGGATTCAAATGCTTAATTAGCGGTTACCCCATAGAAAACAGGAGCGCCAGGTTACATC
CCATTAAGATTGAGTAAAAGTTTTAGGACCCGGGGCTAG
>Rosalind_9781
AGTAACTATATAATGGTATGCTTTGCCAGCTCTATACGCCCTTCAGGCCCCCCAAGTACT
AAATCCAACACGAGCGGCGTCTGCACCCCAAAGAGGTCCGTTCTCCTACATCGCTAATAC
CAGTTCCTTCGATGAAATATGGTCGCGGTCGTTCTAGTGGGAGGAGAAATTGGGCAACTA
CAGCCACCAGAACGAATGACAAGCGATCTATGCCAGTGTCCGAATGATACGCACAGAGTG
CTGAGGTAAGCGATTACAATTGCGGTCTAACTCAAAGAGATCACCGTCAGCTTAACCGAT
CGCCCCTTGCCACGTATTTTTTTATTATAAAGCATCATGGCCGGTGGGGACAAGCTAGGC
GCCACAATGACATCATCATGCGAGAATACCCGTGCGCCCGCAAATATTACAGGGCCACCC
CGAGTGATCCATTGACTCACATTCTAGATTCCCCAAGCCCTACCCCGGCGATTCCCCGAC
TGGTTGTGTTGAGCCCAGCAAAATGTGAGGACGAGTGTTTCCCCCTGCGCCATGAGCCCC
CCGTAGGTAAGTGTTTCCTGACAGCCCGTGTGCACTGGGTTCCTATGGTAGTTAGGACGT
ACTCATGTATCCCGTTGTACCGAGTGATCCAGTCATTACCGAATCGTTAGCTCTACGACT
GTAGCGGGATCGCCGTATATATAATCAATTTAATGAATAATGTGTCTACACCTACATAGA
TCTGGCGGTTTACGATTGCAGCCGCATTTTCCTGGCTACAGCAAACGTCGACCGAGCTAT
GCTATAGTTAATGTGCGCCACTTCGTAGTCACCAACCCTTCCGGTGATACAATATACCTC
ATTTGCGTAGGACATTCACTATGATAGACAATCTTTACCGAGAGCGAACGGTTTCGTTTA
AATACAGTACATCTCCCTTTTCCCAGCTACAGCCCACAA
>Rosalind_8329
ACCTGGGCTTACGCATATGTACGTGCCATACACGTCTTGTAATGAACTTGGACTGGCTTC
TCTACTTTTAACCTTTATATGTCTCACTAGGCCTTTGGATCACACCATACCAGTGTCAGG
AACAAAATTCGGCGTCCATAGATGCTATACGCTGGCCTTCCCGACCGGGGCGAGGGGGAC
GAGTAGCATAAATGGTTGGGCCCGGGCGACATATTTGCCAAGCCCTAAAGGGCGCGTCCA
GCTAGCATGTAGGGCCACGCTCCAGTTGGGCGAGCCTGTGACTAACTTCAATCAACTGCT
GGGATTTACTCGCATAGGGGGTGTCGTCGTCCGTGATGGCCCGGCTCTTAGGTGCCTTAT
GCCATCGCGCGGTAGTGCCGTCAGTGGGGCAACCTGTTGAAGATACTCGCCGGCTGGTCC
TCGTTAAGGATGCTCCGTGGCGCCATTCCCCAGAATATAATTAGTGGCGTTGATATTTAG
CCGTGTTGCTCAGCTTGTTCCTTGGACGCTAACGACTCATTTTTTGCCAGCCCCGCCTTT
GATTACCACTTGCAGGTCGGGAAATTTTTGGTAAGAGACTTATGAAATGTTACATGCGTC
TCGGCACCTCACTTCGGAACTTAAAGAAACCATGGGTCAACAATGCGTTGTCAGAGGTAC
GAGATGGCACGGCCTCGCGAGTAACCGAATGAGGTTAAAATGCGAGTCCCCCCTTAATTT
TTGGCGACTAGCCTACTACATTCGGAAAGCGTGATGCTGCCAGTTAAGCTGATCAGCAAG
CTGATTCGAGCAAGTCAGTTGGCACAAGGAATAGCACATGCGTCCATGGCAATGGATTCG
TACGATCATCTATCGGCACTGTCAATAGGG
>Rosalind_3903
GCACTCACGACGAATGCGGGATGATTGGTCAACCTGCCCATATGGGCGTTCCCTCCTCCT
CTGTCCTGGTGAGGGTTATAAATACGAAGAGATTATGCCTCTTACAATATTTCTAACCGA
TTATGTATTTGCTACGAGGTACACGGGCGTAACCGCTACCCTGATTGCACAGGGCATTTT
TACCCCACACTCCAATATCTTGCCGTATCTGGGGCCGGCAGAGTAGTCCTCGAATTAAGC
TAGGGACCTCGGCCTGAGGTGGCTATCGCTCCGGAATACCTGCAGTACTCATTCGCCTCG
GAGCCAGTTCCGCCCGGACGCTGATTTGAGTAATAGTTTGTCACAGAACGGGCTCGCAAG
ATTCTAGAGATGACTGGCCCCCCTGGACAAGGTATATTAGGATAAATTCTCACGAAGCAT
ACTGACAGCGATAAGTACTTTTTTCAACCTTCCTCCAGCATAATCCTGACTTAGGCCACA
ATATGGGCTTGACATGACTTACGGCCCGCTAATGAGATGCGCGATGCGTGACATAAGCTG
GAGCGCTCGAATCCAAGATTCTGTCTGGGAGCTTTAGGGCCTCGTCTATTAGCGAGATAT
CCCAAAAGGAAAGTACAACACTACCACGGGAAACGGCGATCACCCATTGGCATAGGGTGT
AAATCACTATATAACTCCAGGTCGCCTTCATTAATTGTCCTACAAGCGGGGCTTGCAACG
TAGATGTAGCGGGAATAGTTGGATTATGGCCTGCAACTAGGAATAGAGCCGCCGTGGTAC
CATATCCGGGATTGTACAAGTACTAGAGTGGGTACCGCCCGACTTCACACGTTGGGGGGA
TCTAATAGATAACCGCAAGGAATCATCCTACGCCACGATAGCCAGTAGTACACTCACAAG
GAGGCGAACCTAAGAGGTATCCGGGATAGAGTCAGAGTCTGCATGAGCGGGGAAGCGTAA
GTCAAGGGG
"""

# split the data into parts using '>' as the delimiter
parts = data.strip().split('>')

# remove the first empty element if it exists
if parts[0] == '':
    parts = parts[1:]

# empty a dict to store IDs and DNA seqs
sequences ={}

# and now do the process
for part in parts:
    lines = part.split('\n') # split each part by newlines

    identifier = lines[0] # the first line is the identifier

    sequence = ''.join(lines[1:]) # connect the remaining lines as the seq

    sequences[identifier] = sequence # store in the dict

# Fun to calculate the GC of the seq
def gc_content(seq):
    # count G and C and calc the percentage
    return (seq.count('G') + seq.count('C')) / len(seq) * 100

# trackers of the highest GC content
max_gc_id = None
max_gc_content = 0

# iretate trhough the dicts to find the seq with the highest GC content
for identifier, sequence in sequences.items():
    content = gc_content(sequence) # calc the GC content
    if content > max_gc_content:
        max_gc_content = content
        max_gc_id = identifier

print(f"ID: {max_gc_id}")
print(f"GC: {max_gc_content: .6f}%")